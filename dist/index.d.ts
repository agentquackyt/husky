// Generated by dts-bundle-generator v9.5.1

declare enum Method {
	GET = "GET",
	POST = "POST",
	PUT = "PUT",
	DELETE = "DELETE"
}
export interface Route {
	route: string[];
	callback: (req: Request, params?: any) => Response | Promise<Response> | boolean;
	method?: Method;
}
declare class Router {
	route: string;
	onError: ((req: Request) => Response) | undefined;
	middleware: ((req: Request, next: any) => Response | Promise<Response>) | undefined;
	routes: Route[];
	constructor(route: string, onError?: (req: Request) => Response);
	get getBaseRoute(): string;
	run(req: Request): Response | Promise<Response> | boolean | undefined;
	use(middleware: (req: Request, next: any) => Response | Promise<Response>): Router;
	get(url: string, callback: (req: Request, params?: any) => Response | Promise<Response> | boolean): Router;
	post(url: string, callback: (req: Request, params?: any) => Response | Promise<Response> | boolean): this;
	put(url: string, callback: (req: Request) => Response | Promise<Response> | boolean): this;
	delete(url: string, callback: (req: Request) => Response | Promise<Response> | boolean): this;
}
export type HuskyConfig = {
	port?: string | number;
	httpsConfig?: TLSConfig[];
	logging?: {
		allowHTTP: boolean;
		allowWS: boolean;
		allowError: boolean;
		allowInfo: boolean;
	};
};
export type TLSConfig = {
	serverName: string;
	key: string;
	cert: string;
	passphrase?: string;
	ca?: string;
};
declare class Husky {
	routerList: Router[];
	port: string | number;
	server: import("bun").Server | undefined;
	tlsConfig: TLSConfig[] | undefined;
	constructor(config?: HuskyConfig);
	use(router: Router): void;
	start({ port, callback }?: {
		port?: number;
		callback?: (port: number) => void;
	}): import("bun").Server;
	handleRequest(req: Request): Response | Promise<Response>;
}
declare const _default: {
	Husky: typeof Husky;
	Router: typeof Router;
	JWT: {
		settings: {
			secret: string;
			algorithm: string;
		};
		sign: (payloadJson: any) => string;
		verify: (token: string) => boolean;
		payloadFromToken: (token: string) => any;
		verifyJWT: (req: Request) => Promise<boolean>;
		middleware: (redirectPath: string) => (req: Request, next: () => any) => Promise<any>;
	};
	Console: {
		Output: {
			http: (req: Request) => void;
			error: (message: string) => void;
			info: (message: string) => void;
			ws: (message: string) => void;
			validation: (message: string) => void;
			debug: (message: any) => void;
			center: (message: string, dotted?: boolean) => void;
			printProgress: (progress: string) => void;
			config: (config: {
				allowHTTP: boolean;
				allowWS: boolean;
				allowError: boolean;
				allowInfo: boolean;
			}) => void;
		};
		Color: {
			red: string;
			green: string;
			yellow: string;
			blue: string;
			magenta: string;
			cyan: string;
			white: string;
			reset: string;
			red_bg: string;
			green_bg: string;
			yellow_bg: string;
			blue_bg: string;
			magenta_bg: string;
			cyan_bg: string;
			white_bg: string;
			bold: string;
			underline: string;
			inverse: string;
			hidden: string;
			strikethrough: string;
		};
	};
};

export {
	_default as default,
};

export {};
